% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s.GAMSEL.R
\name{s.GAMSEL}
\alias{s.GAMSEL}
\title{Regularized Generalized Additive Model (GAMSEL) [C, R]}
\usage{
s.GAMSEL(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  x.name = NULL,
  y.name = NULL,
  data = NULL,
  data.test = NULL,
  ipw = TRUE,
  ipw.type = 2,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  lambda = NULL,
  force.lambda = NULL,
  min.unique.perfeat = 4,
  num.lambda = 50,
  family = NULL,
  degrees = NULL,
  min.degree = 1,
  max.degree = 9,
  gamma = 0.4,
  dfs = NULL,
  min.df = 1,
  max.df = 5,
  n.folds = 10,
  which.lambda = c("lambda.min", "lambda.1se"),
  failsafe = TRUE,
  failsafe.lambda = 0.1,
  tol = 1e-04,
  max.iter = 2000,
  parallel = FALSE,
  verbose = TRUE,
  trace = 0,
  print.plot = TRUE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = getOption("rt.fit.theme", "lightgrid"),
  na.action = na.exclude,
  question = NULL,
  n.cores = rtCores,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{ipw}{Logical: If TRUE, apply inverse probability weighting (for Classification only).
Note: If \code{weights} are provided, \code{ipw} is not used. Default = TRUE}

\item{ipw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by max(class.weights)
2: class.weights as in 0, divided by min(class.weights)
Default = 2}

\item{upsample}{Logical: If TRUE, upsample cases to balance outcome classes (for Classification only)
Note: upsample will randomly sample with replacement if the length of the majority class is more than double
the length of the class you are upsampling, thereby introducing randomness}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{lambda}{
User-supplied \code{lambda} sequence.  For best performance, leave as \code{NULL} and allow the routine to automatically select \code{lambda}.  Otherwise, supply a (preferably gradually) decreasing sequence.
}

\item{family}{Error distribution and link function. See \code{stats::family}}

\item{degrees}{
An integer vector of length \code{nvars} specifying the maximum number
of spline basis functions to use for each variable.  
}

\item{gamma}{
Penalty mixing parameter \eqn{0 \le\gamma\le 1}.  Values \eqn{ \gamma <
  0.5}  penalize linear fit less than non-linear fit.  The default is \eqn{\gamma = 0.4}, which encourages a linear term over a nonlinear term.
}

\item{dfs}{
Numeric vector of length \code{nvars} specifying the maximum (end-of-path) degrees of freedom for each variable.  
}

\item{tol}{
  Convergence threshold for coordinate descent.  The coordinate descent loop continues until the total change in objective after a pass over all variables is less than \code{tol}.  Default is \code{1e-4}.
}

\item{parallel}{passed on to the \code{pseudo.bases()} function. Uses
  multiple process if available.
}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{trace}{Integer: If higher than 0, will print more information to the console. Default = 0}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}. Default = TRUE}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{na.action}{How to handle missing values. See \code{?na.fail}}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{outdir}{Path to output directory.
If defined, will save Predicted vs. True plot, if available,
as well as full model output, if \code{save.mod} is TRUE}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional arguments}
}
\value{
\link{rtMod}
}
\description{
Trains a GAMSEL model using \code{gamsel2::gamsel}.
}
\seealso{
\link{elevate} for external cross-validation

Other Supervised Learning: 
\code{\link{s.ADABOOST}()},
\code{\link{s.ADDTREE}()},
\code{\link{s.BART}()},
\code{\link{s.BAYESGLM}()},
\code{\link{s.BRUTO}()},
\code{\link{s.C50}()},
\code{\link{s.CART}()},
\code{\link{s.CTREE}()},
\code{\link{s.ET}()},
\code{\link{s.EVTREE}()},
\code{\link{s.GAM.default}()},
\code{\link{s.GAM.formula}()},
\code{\link{s.GAMSELX2}()},
\code{\link{s.GAMSELX}()},
\code{\link{s.GAM}()},
\code{\link{s.GBM3}()},
\code{\link{s.GBM}()},
\code{\link{s.GLMNET}()},
\code{\link{s.GLM}()},
\code{\link{s.GLS}()},
\code{\link{s.H2ODL}()},
\code{\link{s.H2OGBM}()},
\code{\link{s.H2ORF}()},
\code{\link{s.IRF}()},
\code{\link{s.KNN}()},
\code{\link{s.LDA}()},
\code{\link{s.LM}()},
\code{\link{s.MARS}()},
\code{\link{s.MLRF}()},
\code{\link{s.NBAYES}()},
\code{\link{s.NLA}()},
\code{\link{s.NLS}()},
\code{\link{s.NW}()},
\code{\link{s.POLYMARS}()},
\code{\link{s.PPR}()},
\code{\link{s.PPTREE}()},
\code{\link{s.QDA}()},
\code{\link{s.QRNN}()},
\code{\link{s.RANGER}()},
\code{\link{s.RFSRC}()},
\code{\link{s.RF}()},
\code{\link{s.SGD}()},
\code{\link{s.SPLS}()},
\code{\link{s.SVM}()},
\code{\link{s.TFN}()},
\code{\link{s.XGBLIN}()},
\code{\link{s.XGB}()}
}
\author{
E.D. Gennatas
}
\concept{Supervised Learning}
