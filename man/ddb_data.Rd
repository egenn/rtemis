% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ddb_ops.R
\name{ddb_data}
\alias{ddb_data}
\title{Read CSV using DuckDB}
\usage{
ddb_data(
  filename,
  datadir = NULL,
  sep = ",",
  header = TRUE,
  quotechar = "",
  ignore_errors = TRUE,
  make_unique = TRUE,
  select_columns = NULL,
  filter_column = NULL,
  filter_vals = NULL,
  character2factor = FALSE,
  collect = TRUE,
  progress = TRUE,
  returnobj = c("data.table", "data.frame"),
  data.table.key = NULL,
  clean_colnames = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{filename}{Character: file name; either full path or just the file name,
if \code{datadir} is also provided}

\item{datadir}{Character: Optional path if \code{filename} is not full path}

\item{sep}{Character: Field delimiter/separator}

\item{header}{Logical: If TRUE, first line will be read as column names}

\item{quotechar}{Character: Quote character}

\item{ignore_errors}{Logical: If TRUE, ignore parsing errors (sometimes it's
either this or no data, so)}

\item{make_unique}{Logical: If TRUE, keep only unique rows}

\item{select_columns}{Character vector: Column names to select}

\item{filter_column}{Character: Name of column to filter on, e.g. "ID"}

\item{filter_vals}{Numeric or Character vector: Values in
\code{filter_column} to keep.}

\item{character2factor}{Logical: If TRUE, convert character columns to
factors}

\item{collect}{Logical: If TRUE, collect data and return structure class
as defined by \code{returnobj}}

\item{progress}{Logical: If TRUE, print progress (no indication this works)}

\item{returnobj}{Character: "data.frame" or "data.table" object class to
return. If "data.table", data.frame object returned from
\code{DBI::dbGetQuery} is passed to \code{data.table::setDT}; will add to
execution time if very large, but then that's when you need a data.table}

\item{data.table.key}{Character: If set, this correspond to a column name in the
dataset. This column will be set as key in the data.table output}

\item{clean_colnames}{Logical: If TRUE, clean colnames with
\link{clean_colnames}}

\item{verbose}{Logical: If TRUE, print messages to console}
}
\description{
Lazy-read a CSV file, optionally filter rows, remove duplicates,
clean column names, convert character to factor, and collect.
}
\examples{
\dontrun{
ir <- ddb_data("/Data/massive_dataset.csv",
  filter_column = "ID",
  filter_vals = 8001:9999
)
}
}
\author{
E.D. Gennatas
}
