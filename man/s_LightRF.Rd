% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_LightGBM.R
\name{s_LightRF}
\alias{s_LightRF}
\title{Random Forest with LightGBM}
\usage{
s_LightRF(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  x.name = NULL,
  y.name = NULL,
  weights = NULL,
  ifw = TRUE,
  ifw.type = 2,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  objective = NULL,
  max_nrounds = 500L,
  force_nrounds = 500L,
  early_stopping_rounds = -1L,
  num_leaves = 4096L,
  max_depth = -1L,
  learning_rate = 1,
  subsample = 0.623,
  subsample_freq = 1L,
  lambda_l1 = 0,
  lambda_l2 = 0,
  max_cat_threshold = 32L,
  min_data_per_group = 32L,
  linear_tree = FALSE,
  tree_learner = "data_parallel",
  .gs = FALSE,
  grid.resample.rtset = rtset.resample("kfold", 5),
  gridsearch.type = "exhaustive",
  metric = NULL,
  maximize = NULL,
  importance = TRUE,
  print.plot = FALSE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = rtTheme,
  question = NULL,
  rtclass = NULL,
  save.dump = FALSE,
  verbose = TRUE,
  grid.verbose = FALSE,
  lightgbm_verbose = -1,
  trace = 0,
  save.gridrun = FALSE,
  n.cores = 1,
  n_threads = rtCores,
  force_col_wise = FALSE,
  force_row_wise = FALSE,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{weights}{Numeric vector: Weights for cases. For classification, \code{weights} takes precedence
over \code{ifw}, therefore set \code{weights = NULL} if using \code{ifw}.
Note: If \code{weight} are provided, \code{ifw} is not used. Leave NULL if setting \code{ifw = TRUE}.}

\item{ifw}{Logical: If TRUE, apply inverse frequency weighting
(for Classification only).
Note: If \code{weights} are provided, \code{ifw} is not used.}

\item{ifw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by min(class.weights)
2: class.weights as in 0, divided by max(class.weights)}

\item{upsample}{Logical: If TRUE, upsample cases to balance outcome classes (for Classification only)
Note: upsample will randomly sample with replacement if the length of the majority class is more than double
the length of the class you are upsampling, thereby introducing randomness}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{objective}{(Default = NULL)}

\item{max_nrounds}{Integer: Maximum number of rounds to run. Can be set to a high number
as early stopping will limit nrounds by monitoring inner CV error}

\item{force_nrounds}{Integer: Number of rounds to run if not estimating optimal number by CV}

\item{early_stopping_rounds}{Integer: Training on resamples of \code{x} (tuning) will
stop if performance does not improve for this many rounds}

\item{num_leaves}{Integer: [gS] Maximum tree leaves for base learners.}

\item{max_depth}{Integer: [gS] Maximum tree depth for base learners, <=0 means no limit.}

\item{learning_rate}{Numeric: [gS] Boosting learning rate}

\item{subsample}{Numeric: [gS] Subsample ratio of the training set.}

\item{subsample_freq}{Integer: Subsample every this many iterations}

\item{lambda_l1}{Numeric: [gS] L1 regularization term}

\item{lambda_l2}{Numeric: [gS] L2 regularization term}

\item{linear_tree}{Logical: [gS] If \code{TRUE}, use linear trees}

\item{tree_learner}{Character: [gS] "serial", "feature", "data", "voting"}

\item{grid.resample.rtset}{List: Output of \link{rtset.resample} defining
grid search parameters.}

\item{gridsearch.type}{Character: Type of grid search to perform:
"exhaustive" or "randomized".}

\item{metric}{Character: Metric to minimize, or maximize if
\code{maximize = TRUE} during grid search. Default = NULL, which results in
"Balanced Accuracy" for Classification,
"MSE" for Regression, and "Coherence" for Survival Analysis.}

\item{maximize}{Logical: If TRUE, \code{metric} will be maximized if grid
search is run.}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}.}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{grid.verbose}{Logical: Passed to \code{gridSearchLearn}}

\item{n.cores}{Integer: Number of cores to use.}

\item{n_threads}{Integer: Number of threads for lightgbm using OpenMP. Only parallelize
resamples using \code{n.cores} or the lightgbm execution using this setting.}

\item{outdir}{Path to output directory.
If defined, will save Predicted vs. True plot, if available,
as well as full model output, if \code{save.mod} is TRUE}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Extra arguments appended to \code{lgb.train}'s \code{params}.}
}
\description{
Random Forest with LightGBM
}
\examples{
\dontrun{
x <- rnormmat(500, 10)
y <- x[, 3] + .5 * x[, 5]^2 + rnorm(500)
dat <- data.frame(x, y)
mod <- s_LightRF(dat)
}
}
\author{
ED Gennatas
}
