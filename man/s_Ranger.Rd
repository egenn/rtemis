% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_Ranger.R
\name{s_Ranger}
\alias{s_Ranger}
\title{Random Forest Classification and Regression (C, R)}
\usage{
s_Ranger(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  x.name = NULL,
  y.name = NULL,
  n.trees = 1000,
  weights = NULL,
  ifw = TRUE,
  ifw.type = 2,
  ifw.case.weights = TRUE,
  ifw.class.weights = FALSE,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  autotune = FALSE,
  classwt = NULL,
  n.trees.try = 500,
  stepFactor = 2,
  mtry = NULL,
  mtryStart = NULL,
  inbag.resample = NULL,
  stratify.on.y = FALSE,
  grid.resample.params = setup.resample("kfold", 5),
  gridsearch.type = c("exhaustive", "randomized"),
  gridsearch.randomized.p = 0.1,
  metric = NULL,
  maximize = NULL,
  probability = NULL,
  importance = "impurity",
  local.importance = FALSE,
  replace = TRUE,
  min.node.size = NULL,
  splitrule = NULL,
  strata = NULL,
  sampsize = if (replace) nrow(x) else ceiling(0.632 * nrow(x)),
  tune.do.trace = FALSE,
  imetrics = FALSE,
  n.cores = rtCores,
  print.tune.plot = FALSE,
  print.plot = FALSE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = rtTheme,
  question = NULL,
  grid.verbose = verbose,
  verbose = TRUE,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{n.trees}{Integer: Number of trees to grow. Default = 1000}

\item{weights}{Numeric vector: Weights for cases. For classification, \code{weights} takes precedence
over \code{ifw}, therefore set \code{weights = NULL} if using \code{ifw}.
Note: If \code{weight} are provided, \code{ifw} is not used. Leave NULL if setting \code{ifw = TRUE}.}

\item{ifw}{Logical: If TRUE, apply inverse frequency weighting
(for Classification only).
Note: If \code{weights} are provided, \code{ifw} is not used.}

\item{ifw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by min(class.weights)
2: class.weights as in 0, divided by max(class.weights)}

\item{ifw.case.weights}{Logical: If TRUE, define ranger's
\code{case.weights} using IPW. Default = TRUE
Note: Cannot use case.weights together with \code{stratify.on.y} or
\code{inbag.resample}}

\item{ifw.class.weights}{Logical: If TRUE, define ranger's
\code{class.weights} using IPW. Default = FALSE}

\item{upsample}{Logical: If TRUE, upsample training set cases not belonging in majority outcome
group}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{autotune}{Logical: If TRUE, use \code{randomForest::tuneRF} to determine \code{mtry}}

\item{classwt}{Vector, Float: Priors of the classes for
\code{randomForest::tuneRF} if \code{autotune = TRUE}.
For classification only; need not add up to 1}

\item{n.trees.try}{Integer: Number of trees to train for tuning, if \code{autotune = TRUE}}

\item{stepFactor}{Float: If \code{autotune = TRUE}, at each tuning iteration, \code{mtry} is multiplied or
divided by this value. Default = 1.5}

\item{mtry}{[gS] Integer: Number of features sampled randomly at each split.
Defaults to square root of n of
features for classification, and a third of n of features for regression.}

\item{mtryStart}{Integer: If \code{autotune = TRUE}, start at this value for \code{mtry}}

\item{inbag.resample}{List, length \code{n.tree}: Output of
\link{setup.resample} to define resamples used for each
tree. Default = NULL}

\item{stratify.on.y}{Logical: If TRUE, overrides \code{inbag.resample} to
use stratified bootstraps for each tree.
This can help improve test set performance in imbalanced datasets.
Default = FALSE. Note: Cannot be used with \code{ifw.case.weights}}

\item{grid.resample.params}{List: Output of \link{setup.resample} defining
grid search parameters.}

\item{gridsearch.type}{Character: Type of grid search to perform:
"exhaustive" or "randomized".}

\item{gridsearch.randomized.p}{Float (0, 1): If
\code{gridsearch.type = "randomized"}, randomly test this proportion of
combinations.}

\item{metric}{Character: Metric to minimize, or maximize if
\code{maximize = TRUE} during grid search. Default = NULL, which results in
"Balanced Accuracy" for Classification,
"MSE" for Regression, and "Coherence" for Survival Analysis.}

\item{maximize}{Logical: If TRUE, \code{metric} will be maximized if grid
search is run.}

\item{probability}{Logical: If TRUE, grow a probability forest.
See \code{ranger::ranger}. Default = FALSE}

\item{importance}{Character: "none", "impurity", "impurity_corrected", or
"permutation"
Default = "impurity"}

\item{local.importance}{Logical: If TRUE, return local importance values.
Only applicable if
\code{importance} is set to "permutation".}

\item{replace}{Logical: If TRUE, sample cases with replacement during training.}

\item{min.node.size}{[gS] Integer: Minimum node size}

\item{splitrule}{Character: For classification: "gini" (Default) or
"extratrees";
For regression: "variance" (Default), "extratrees" or "maxstat".
For survival "logrank" (Default), "extratrees", "C" or "maxstat".}

\item{strata}{Vector, Factor: Will be used for stratified sampling}

\item{sampsize}{Integer: Size of sample to draw. In Classification, if \code{strata} is defined, this
can be a vector of the same length, in which case, corresponding values determine how many cases are drawn from
the strata.}

\item{tune.do.trace}{Same as \code{do.trace} but for tuning,
when \code{autotune = TRUE}}

\item{imetrics}{Logical: If TRUE, calculate interpretability metrics
(N of trees and N of nodes) and save under the \code{extra} field of \code{rtMod}}

\item{n.cores}{Integer: Number of cores to use.}

\item{print.tune.plot}{Logical: passed to \code{randomForest::tuneRF}.}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}.}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{grid.verbose}{Logical: Passed to \code{gridSearchLearn}}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{outdir}{String, Optional: Path to directory to save output}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional arguments to be passed to \code{ranger::ranger}}
}
\value{
\code{rtMod} object
}
\description{
Train a Random Forest for regression or classification using \code{ranger}
}
\details{
You should cconsider, or try, setting mtry to NCOL(x), especially for small number of features.
By default mtry is set to NCOL(x) for NCOL(x) <= 20.
For imbalanced datasets, setting stratify.on.y = TRUE should improve performance.
If \code{autotune = TRUE}, \code{randomForest::tuneRF} will be run to determine best \code{mtry}
value.
[gS]: indicated parameter will be tuned by grid search if more than one value is passed

See \href{https://statistics.berkeley.edu/sites/default/files/tech-reports/666.pdf}{Tech Report} comparing
balanced (ifw.case.weights = TRUE) and weighted (ifw.class.weights = TRUE) Random Forests.
}
\seealso{
\link{train_cv} for external cross-validation

Other Supervised Learning: 
\code{\link{s_AdaBoost}()},
\code{\link{s_AddTree}()},
\code{\link{s_BART}()},
\code{\link{s_BRUTO}()},
\code{\link{s_BayesGLM}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTree}()},
\code{\link{s_EVTree}()},
\code{\link{s_GAM}()},
\code{\link{s_GBM}()},
\code{\link{s_GLM}()},
\code{\link{s_GLMNET}()},
\code{\link{s_GLMTree}()},
\code{\link{s_GLS}()},
\code{\link{s_H2ODL}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_HAL}()},
\code{\link{s_Isotonic}()},
\code{\link{s_KNN}()},
\code{\link{s_LDA}()},
\code{\link{s_LM}()},
\code{\link{s_LMTree}()},
\code{\link{s_LightCART}()},
\code{\link{s_LightGBM}()},
\code{\link{s_MARS}()},
\code{\link{s_MLRF}()},
\code{\link{s_NBayes}()},
\code{\link{s_NLA}()},
\code{\link{s_NLS}()},
\code{\link{s_NW}()},
\code{\link{s_PPR}()},
\code{\link{s_PolyMARS}()},
\code{\link{s_QDA}()},
\code{\link{s_QRNN}()},
\code{\link{s_RF}()},
\code{\link{s_RFSRC}()},
\code{\link{s_SDA}()},
\code{\link{s_SGD}()},
\code{\link{s_SPLS}()},
\code{\link{s_SVM}()},
\code{\link{s_TFN}()},
\code{\link{s_XGBoost}()},
\code{\link{s_XRF}()}

Other Tree-based methods: 
\code{\link{s_AdaBoost}()},
\code{\link{s_AddTree}()},
\code{\link{s_BART}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTree}()},
\code{\link{s_EVTree}()},
\code{\link{s_GBM}()},
\code{\link{s_GLMTree}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_LMTree}()},
\code{\link{s_LightCART}()},
\code{\link{s_LightGBM}()},
\code{\link{s_MLRF}()},
\code{\link{s_RF}()},
\code{\link{s_RFSRC}()},
\code{\link{s_XGBoost}()},
\code{\link{s_XRF}()}

Other Ensembles: 
\code{\link{s_AdaBoost}()},
\code{\link{s_GBM}()},
\code{\link{s_RF}()}
}
\author{
E.D. Gennatas
}
\concept{Ensembles}
\concept{Supervised Learning}
\concept{Tree-based methods}
