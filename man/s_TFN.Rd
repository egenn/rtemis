% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_TFN.R
\name{s_TFN}
\alias{s_TFN}
\title{Feedforward Neural Network with \pkg{tensorflow} (C, R)}
\usage{
s_TFN(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  class.weights = NULL,
  ifw = TRUE,
  ifw.type = 2,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  net = NULL,
  n.hidden.nodes = NULL,
  initializer = c("glorot_uniform", "glorot_normal", "he_uniform", "he_normal",
    "lecun_uniform", "lecun_normal", "random_uniform", "random_normal",
    "variance_scaling", "truncated_normal", "orthogonal", "zeros", "ones", "constant"),
  initializer.seed = NULL,
  dropout = 0,
  activation = c("relu", "selu", "elu", "sigmoid", "hard_sigmoid", "tanh", "exponential",
    "linear", "softmax", "softplus", "softsign"),
  kernel_l1 = 0.1,
  kernel_l2 = 0,
  activation_l1 = 0,
  activation_l2 = 0,
  batch.normalization = TRUE,
  output = NULL,
  loss = NULL,
  optimizer = c("rmsprop", "adadelta", "adagrad", "adam", "adamax", "nadam", "sgd"),
  learning.rate = NULL,
  metric = NULL,
  epochs = 100,
  batch.size = NULL,
  validation.split = 0.2,
  callback = keras::callback_early_stopping(patience = 150),
  scale = TRUE,
  x.name = NULL,
  y.name = NULL,
  print.plot = FALSE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = rtTheme,
  question = NULL,
  verbose = TRUE,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{class.weights}{Numeric vector: Class weights for training.}

\item{ifw}{Logical: If TRUE, apply inverse frequency weighting
(for Classification only).
Note: If \code{weights} are provided, \code{ifw} is not used.}

\item{ifw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by min(class.weights)
2: class.weights as in 0, divided by max(class.weights)}

\item{upsample}{Logical: If TRUE, upsample cases to balance outcome classes (for Classification only)
Note: upsample will randomly sample with replacement if the length of the majority class is more than double
the length of the class you are upsampling, thereby introducing randomness}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{net}{Pre-defined keras network to be trained (optional)}

\item{n.hidden.nodes}{Integer vector: Length must be equal to the number of hidden layers you wish to create.
Can be zero, in which case you get a linear model. Default = N of features, i.e. NCOL(x)}

\item{initializer}{Character: Initializer to use for each layer: "glorot_uniform", "glorot_normal", "he_uniform",
"he_normal", "cun_uniform", "lecun_normal", "random_uniform", "random_normal", "variance_scaling",
"truncated_normal", "orthogonal", "zeros", "ones", "constant".
Glorot is also known as Xavier initialization.}

\item{initializer.seed}{Integer: Seed to use for each initializer for reproducibility.}

\item{dropout}{Floar, vector, (0, 1): Probability of dropping nodes. Can be a vector of length equal to N of layers,
otherwise will be recycled. Default = 0}

\item{activation}{String vector: Activation type to use: "relu", "selu", "elu", "sigmoid", "hard_sigmoid", "tanh",
"exponential", "linear", "softmax", "softplus", "softsign". Defaults to "relu" for Classification and
"tanh" for Regression}

\item{kernel_l1}{Float: l1 penalty on weights.}

\item{kernel_l2}{Float: l2 penalty on weights.}

\item{activation_l1}{Float: l1 penalty on layer output.}

\item{activation_l2}{Float: l2 penalty on layer output.}

\item{batch.normalization}{Logical: If TRUE, batch normalize after each hidden layer.}

\item{output}{Character: Activation to use for output layer. Can be any as in \code{activation}.
Default = "linear" for Regression, "sigmoid" for binary classification, "softmax" for multiclass}

\item{loss}{Character: Loss to use: Default = "mean_squared_error" for regression, "binary_crossentropy" for binary
classification, "sparse_categorical_crossentropy" for multiclass}

\item{optimizer}{Character: Optimization to use: "rmsprop", "adadelta", "adagrad", "adam", "adamax", "nadam", "sgd".
Default = "rmsprop"}

\item{learning.rate}{Float: learning rate. Defaults depend on \code{optimizer} used and are:
\verb{rmsprop = .01, adadelta = 1, adagrad = .01, adamax = .002, adam = .001, nadam = .002, sgd = .1}}

\item{metric}{Character: Metric used for evaluation during train. Default = "mse" for regression,
"accuracy" for classification.}

\item{epochs}{Integer: Number of epochs. Default = 100}

\item{batch.size}{Integer: Batch size. Default = N of cases}

\item{validation.split}{Float (0, 1): proportion of training data to use for validation. Default = .2}

\item{callback}{Function to be called by keras during fitting.
Default = \code{keras::callback_early_stopping(patience = 150)} for early stopping.}

\item{scale}{Logical: If TRUE, scale featues before training.
column means and standard deviation will be saved in \code{rtMod$extra} field to allow
scaling ahead of prediction on new data}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}.}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{outdir}{Path to output directory.
If defined, will save Predicted vs. True plot, if available,
as well as full model output, if \code{save.mod} is TRUE}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional parameters}
}
\description{
Train an Feedforward Neural Network using \pkg{keras} and \pkg{tensorflow}
}
\details{
For more information on arguments and hyperparameters, see (https://keras.rstudio.com/) and (https://keras.io/)
It is important to define network structure and adjust hyperparameters based on your problem. You cannot expect
defaults to work on any given dataset.
}
\seealso{
\link{train_cv} for external cross-validation

Other Supervised Learning: 
\code{\link{s_AdaBoost}()},
\code{\link{s_AddTree}()},
\code{\link{s_BART}()},
\code{\link{s_BRUTO}()},
\code{\link{s_BayesGLM}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTree}()},
\code{\link{s_EVTree}()},
\code{\link{s_GAM}()},
\code{\link{s_GBM}()},
\code{\link{s_GLM}()},
\code{\link{s_GLMNET}()},
\code{\link{s_GLMTree}()},
\code{\link{s_GLS}()},
\code{\link{s_H2ODL}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_HAL}()},
\code{\link{s_Isotonic}()},
\code{\link{s_KNN}()},
\code{\link{s_LDA}()},
\code{\link{s_LM}()},
\code{\link{s_LMTree}()},
\code{\link{s_LightCART}()},
\code{\link{s_LightGBM}()},
\code{\link{s_MARS}()},
\code{\link{s_MLRF}()},
\code{\link{s_NBayes}()},
\code{\link{s_NLA}()},
\code{\link{s_NLS}()},
\code{\link{s_NW}()},
\code{\link{s_PPR}()},
\code{\link{s_PolyMARS}()},
\code{\link{s_QDA}()},
\code{\link{s_QRNN}()},
\code{\link{s_RF}()},
\code{\link{s_RFSRC}()},
\code{\link{s_Ranger}()},
\code{\link{s_SDA}()},
\code{\link{s_SGD}()},
\code{\link{s_SPLS}()},
\code{\link{s_SVM}()},
\code{\link{s_XGBoost}()},
\code{\link{s_XRF}()}

Other Deep Learning: 
\code{\link{d_H2OAE}()},
\code{\link{s_H2ODL}()}
}
\author{
E.D. Gennatas
}
\concept{Deep Learning}
\concept{Supervised Learning}
