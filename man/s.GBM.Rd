% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s.GBM.R
\name{s.GBM}
\alias{s.GBM}
\title{Gradient Boosting Machine [C, R, S]}
\usage{
s.GBM(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  weights = NULL,
  ipw = TRUE,
  ipw.type = 2,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  distribution = NULL,
  interaction.depth = 2,
  shrinkage = 0.01,
  bag.fraction = 0.9,
  n.minobsinnode = 5,
  n.trees = 2000,
  max.trees = 5000,
  force.n.trees = NULL,
  n.tree.window = 0,
  gbm.select.smooth = TRUE,
  n.new.trees = 500,
  min.trees = 50,
  failsafe.trees = 1000,
  imetrics = FALSE,
  .gs = FALSE,
  grid.resample.rtset = rtset.resample("kfold", 5),
  grid.search.type = "exhaustive",
  metric = NULL,
  maximize = NULL,
  plot.tune.error = FALSE,
  exclude.test.lt.train = FALSE,
  exclude.lt.min.trees = FALSE,
  res.fail.thres = 0.99,
  n.extra.trees = 0,
  n.cores = rtCores,
  relInf = TRUE,
  varImp = FALSE,
  offset = NULL,
  misc = NULL,
  var.monotone = NULL,
  keep.data = TRUE,
  var.names = NULL,
  response.name = "y",
  checkmods = FALSE,
  group = NULL,
  plot.perf = FALSE,
  plot.res = ifelse(!is.null(outdir), TRUE, FALSE),
  plot.fitted = NULL,
  plot.predicted = NULL,
  plotRelInf = FALSE,
  plotVarImp = FALSE,
  print.plot = TRUE,
  plot.theme = getOption("rt.theme"),
  x.name = NULL,
  y.name = NULL,
  question = NULL,
  verbose = TRUE,
  trace = 0,
  grid.verbose = TRUE,
  gbm.fit.verbose = FALSE,
  outdir = NULL,
  save.gridrun = FALSE,
  save.rds = TRUE,
  save.res = FALSE,
  save.res.mod = FALSE,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{weights}{Numeric vector: Weights for cases. For classification, \code{weights} takes precedence
over \code{ipw}, therefore set \code{weights = NULL} if using \code{ipw}.
Note: If \code{weight} are provided, \code{ipw} is not used. Leave NULL if setting \code{ipw = TRUE}. Default = NULL}

\item{ipw}{Logical: If TRUE, apply inverse probability weighting (for Classification only).
Note: If \code{weights} are provided, \code{ipw} is not used. Default = TRUE}

\item{ipw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by max(class.weights)
2: class.weights as in 0, divided by min(class.weights)
Default = 2}

\item{upsample}{Logical: If TRUE, upsample cases to balance outcome classes (for Classification only)
Note: upsample will randomly sample with replacement if the length of the majority class is more than double
the length of the class you are upsampling, thereby introducing randomness}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{interaction.depth}{[gS] Integer: Interaction depth. Default = 2}

\item{shrinkage}{[gS] Float: Shrinkage (learning rate). Default = .01}

\item{bag.fraction}{[gS] Float (0, 1): Fraction of cases to use to train each tree.
Helps avoid overfitting. Default = .75}

\item{n.minobsinnode}{[gS] Integer: Minimum number of observation allowed in node. Default = 5}

\item{n.trees}{Integer: Initial number of trees to fit}

\item{relInf}{Logical: If TRUE (Default), estimate variables' relative influence.}

\item{varImp}{Logical: If TRUE, estimate variable importance by permutation (as in random forests;
noted as experimental in gbm). Takes longer than (default) relative influence.
The two measures are highly correlated.}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}. Default = TRUE}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{trace}{Integer: If higher than 0, will print more information to the console. Default = 0}

\item{outdir}{Character: If defined, save log, 'plot.all' plots (see above) and RDS file of complete output}

\item{save.rds}{Logical: If outdir is defined, should all data be saved in RDS file? s.SVDnetGBM will save
mod.gbm, so no need to save again.}

\item{save.res.mod}{Logical: If TRUE, save gbm model for each grid run. For diagnostic purposes only:
Object size adds up quickly}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional arguments}

\item{stratify.var}{If resampling is stratified, stratify against this variable. Defaults to outcome}
}
\description{
Train a GBM model using \code{gbm::gbm.fit}
}
\details{
This is the older gbm package available on CRAN. It may be preferable to use \code{s.GBM3}
which uses \code{gbm-developers/gbm3} from GitHub.
Early stopping is implemented by fitting \code{n.trees} initially, checking the (smoothed) validation
error curve, and adding \code{n.new.trees} if needed, until error does not reduce or \code{max.trees} is
reached.
[gS] in the argument description indicates that multiple values can be passed, in
which case tuning will be performed using grid search. gS is supported for:
interaction.depth, shrinkage, bag.fraction, and n.minobsinnode
This function includes a workaround for when \code{gbm.fit} fails.
If an error is detected, \code{gbm.fit} is rerun until successful and the procedure continues normally
}
\seealso{
\link{elevate} for external cross-validation

Other Supervised Learning: 
\code{\link{s.ADABOOST}()},
\code{\link{s.ADDTREE}()},
\code{\link{s.BART}()},
\code{\link{s.BAYESGLM}()},
\code{\link{s.BRUTO}()},
\code{\link{s.C50}()},
\code{\link{s.CART}()},
\code{\link{s.CTREE}()},
\code{\link{s.ET}()},
\code{\link{s.EVTREE}()},
\code{\link{s.GAM.default}()},
\code{\link{s.GAM.formula}()},
\code{\link{s.GAMSELX2}()},
\code{\link{s.GAMSELX}()},
\code{\link{s.GAMSEL}()},
\code{\link{s.GAM}()},
\code{\link{s.GBM0}()},
\code{\link{s.GBM3}()},
\code{\link{s.GLMNET}()},
\code{\link{s.GLM}()},
\code{\link{s.GLS}()},
\code{\link{s.H2ODL}()},
\code{\link{s.H2OGBM}()},
\code{\link{s.H2ORF}()},
\code{\link{s.IRF}()},
\code{\link{s.KNN}()},
\code{\link{s.LDA}()},
\code{\link{s.LM}()},
\code{\link{s.MARS}()},
\code{\link{s.MLRF}()},
\code{\link{s.NBAYES}()},
\code{\link{s.NLA}()},
\code{\link{s.NLS}()},
\code{\link{s.NW}()},
\code{\link{s.POLYMARS}()},
\code{\link{s.PPR}()},
\code{\link{s.PPTREE}()},
\code{\link{s.QDA}()},
\code{\link{s.QRNN}()},
\code{\link{s.RANGER}()},
\code{\link{s.RFSRC}()},
\code{\link{s.RF}()},
\code{\link{s.SDA}()},
\code{\link{s.SGD}()},
\code{\link{s.SPLS}()},
\code{\link{s.SVM}()},
\code{\link{s.TFN}()},
\code{\link{s.XGBLIN}()},
\code{\link{s.XGBOOST}()},
\code{\link{s.XGB}()}

Other Tree-based methods: 
\code{\link{s.ADABOOST}()},
\code{\link{s.ADDTREE}()},
\code{\link{s.BART}()},
\code{\link{s.C50}()},
\code{\link{s.CART}()},
\code{\link{s.CTREE}()},
\code{\link{s.ET}()},
\code{\link{s.EVTREE}()},
\code{\link{s.GBM0}()},
\code{\link{s.GBM3}()},
\code{\link{s.H2OGBM}()},
\code{\link{s.H2ORF}()},
\code{\link{s.IRF}()},
\code{\link{s.MLRF}()},
\code{\link{s.PPTREE}()},
\code{\link{s.RANGER}()},
\code{\link{s.RFSRC}()},
\code{\link{s.RF}()},
\code{\link{s.XGBOOST}()},
\code{\link{s.XGB}()}

Other Ensembles: 
\code{\link{s.ADABOOST}()},
\code{\link{s.GBM0}()},
\code{\link{s.GBM3}()},
\code{\link{s.RANGER}()},
\code{\link{s.RF}()}
}
\author{
E.D. Gennatas
}
\concept{Ensembles}
\concept{Supervised Learning}
\concept{Tree-based methods}
