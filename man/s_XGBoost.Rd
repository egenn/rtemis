% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_XGBoost.R
\name{s_XGBoost}
\alias{s_XGBoost}
\title{XGBoost Classification and Regression (C, R)}
\usage{
s_XGBoost(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  x.name = NULL,
  y.name = NULL,
  booster = c("gbtree", "gblinear", "dart"),
  missing = NA,
  nrounds = 1000L,
  force.nrounds = NULL,
  weights = NULL,
  ifw = TRUE,
  ifw.type = 2,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  obj = NULL,
  feval = NULL,
  xgb.verbose = NULL,
  print_every_n = 100L,
  early_stopping_rounds = 50L,
  eta = 0.01,
  gamma = 0,
  max_depth = 2,
  min_child_weight = 5,
  max_delta_step = 0,
  subsample = 0.75,
  colsample_bytree = 1,
  colsample_bylevel = 1,
  lambda = 0,
  alpha = 0,
  tree_method = "auto",
  sketch_eps = 0.03,
  num_parallel_tree = 1,
  base_score = NULL,
  objective = NULL,
  sample_type = "uniform",
  normalize_type = "forest",
  rate_drop = 0,
  one_drop = 0,
  skip_drop = 0,
  grid.resample.params = setup.resample("kfold", 5),
  gridsearch.type = "exhaustive",
  metric = NULL,
  maximize = NULL,
  importance = NULL,
  print.plot = FALSE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = rtTheme,
  question = NULL,
  verbose = TRUE,
  grid.verbose = FALSE,
  trace = 0,
  save.gridrun = FALSE,
  n.cores = 1,
  nthread = rtCores,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  .gs = FALSE,
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{booster}{Character: "gbtree", "gblinear": Booster to use.}

\item{missing}{String or Numeric: Which values to consider as missing.}

\item{nrounds}{Integer: Maximum number of rounds to run. Can be set to a high number
as early stopping will limit nrounds by monitoring inner CV error}

\item{force.nrounds}{Integer: Number of rounds to run if not estimating optimal number by CV}

\item{weights}{Numeric vector: Weights for cases. For classification, \code{weights} takes precedence
over \code{ifw}, therefore set \code{weights = NULL} if using \code{ifw}.
Note: If \code{weight} are provided, \code{ifw} is not used. Leave NULL if setting \code{ifw = TRUE}.}

\item{ifw}{Logical: If TRUE, apply inverse frequency weighting
(for Classification only).
Note: If \code{weights} are provided, \code{ifw} is not used.}

\item{ifw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by min(class.weights)
2: class.weights as in 0, divided by max(class.weights)}

\item{upsample}{Logical: If TRUE, upsample cases to balance outcome classes (for Classification only)
Note: upsample will randomly sample with replacement if the length of the majority class is more than double
the length of the class you are upsampling, thereby introducing randomness}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{obj}{Function: Custom objective function. See \code{?xgboost::xgboost}}

\item{feval}{Function: Custom evaluation function. See \code{?xgboost::xgboost}}

\item{xgb.verbose}{Integer: Verbose level for XGB learners used for tuning.}

\item{print_every_n}{Integer: Print evaluation metrics every this many iterations}

\item{early_stopping_rounds}{Integer: Training on resamples of \code{x.train} (tuning) will stop if performance
does not improve for this many rounds}

\item{eta}{[gS] Numeric (0, 1): Learning rate.}

\item{gamma}{[gS] Numeric: Minimum loss reduction required to make further partition}

\item{max_depth}{[gS] Integer: Maximum tree depth.}

\item{min_child_weight}{[gS] Numeric: Minimum sum of instance weight needed in a child.}

\item{max_delta_step}{[gS] Numeric: Maximum delta step we allow each leaf output to
be. O means no constraint. 1-10 may help control the update, especially with
imbalanced outcomes.}

\item{subsample}{[gS] Numeric: subsample ratio of the training instance}

\item{colsample_bytree}{[gS] Numeric: subsample ratio of columns when constructing each tree}

\item{colsample_bylevel}{[gS] Numeric}

\item{lambda}{[gS] L2 regularization on weights}

\item{alpha}{[gS] L1 regularization on weights}

\item{tree_method}{[gS] XGBoost tree construction algorithm}

\item{sketch_eps}{[gS] Numeric (0, 1):}

\item{num_parallel_tree}{Integer: N of trees to grow in parallel: Results in Random Forest -like algorithm.
(Default = 1; i.e. regular boosting)}

\item{base_score}{Numeric: The mean outcome response.}

\item{objective}{(Default = NULL)}

\item{sample_type}{Character: Type of sampling algorithm for \code{dart} booster
"uniform": dropped trees are selected uniformly.
"weighted": dropped trees are selected in proportion to weight.}

\item{normalize_type}{Character.}

\item{rate_drop}{[gS] Numeric: Dropout rate for \code{dart} booster.}

\item{one_drop}{[gS] Integer {0, 1}: When this flag is enabled, at least one tree
is always dropped during the dropout.}

\item{skip_drop}{[gS] Numeric [0, 1]: Probability of skipping the dropout
procedure during a boosting iteration. If a dropout is skipped, new trees are added
in the same manner as gbtree. Non-zero \code{skip_drop} has higher priority than
\code{rate_drop} or \code{one_drop}.}

\item{grid.resample.params}{List: Output of \link{setup.resample} defining
grid search parameters.}

\item{gridsearch.type}{Character: Type of grid search to perform:
"exhaustive" or "randomized".}

\item{metric}{Character: Metric to minimize, or maximize if
\code{maximize = TRUE} during grid search. Default = NULL, which results in
"Balanced Accuracy" for Classification,
"MSE" for Regression, and "Coherence" for Survival Analysis.}

\item{maximize}{Logical: If TRUE, \code{metric} will be maximized if grid
search is run.}

\item{importance}{Logical: If TRUE, calculate variable importance.}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}.}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{grid.verbose}{Logical: Passed to \code{gridSearchLearn}}

\item{trace}{Integer: If > 0, print parameter values to console.}

\item{save.gridrun}{Logical: If TRUE, save grid search models.}

\item{n.cores}{Integer: Number of cores to use.}

\item{nthread}{Integer: Number of threads for xgboost using OpenMP. Only parallelize resamples
using \code{n.cores} or the xgboost execution using this setting. At the moment of
writing, parallelization via this parameter causes a linear booster to fail most of
the times. Therefore, default is rtCores for 'gbtree', 1 for 'gblinear'}

\item{outdir}{Path to output directory.
If defined, will save Predicted vs. True plot, if available,
as well as full model output, if \code{save.mod} is TRUE}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{.gs}{Internal use only}

\item{...}{Additional arguments passed to \code{xgboost::xgb.train}}
}
\value{
\code{rtMod} object
}
\description{
Tune hyperparameters using grid search and resampling,
train a final model, and validate it
}
\details{
[gS]: indicates parameter will be autotuned by grid search if multiple
values are passed. Learn more about XGBoost's parameters here:
http://xgboost.readthedocs.io/en/latest/parameter.html
}
\seealso{
\link{train_cv} for external cross-validation

Other Supervised Learning: 
\code{\link{s_AdaBoost}()},
\code{\link{s_AddTree}()},
\code{\link{s_BART}()},
\code{\link{s_BRUTO}()},
\code{\link{s_BayesGLM}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTree}()},
\code{\link{s_EVTree}()},
\code{\link{s_GAM}()},
\code{\link{s_GBM}()},
\code{\link{s_GLM}()},
\code{\link{s_GLMNET}()},
\code{\link{s_GLMTree}()},
\code{\link{s_GLS}()},
\code{\link{s_H2ODL}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_HAL}()},
\code{\link{s_Isotonic}()},
\code{\link{s_KNN}()},
\code{\link{s_LDA}()},
\code{\link{s_LM}()},
\code{\link{s_LMTree}()},
\code{\link{s_LightCART}()},
\code{\link{s_LightGBM}()},
\code{\link{s_MARS}()},
\code{\link{s_MLRF}()},
\code{\link{s_NBayes}()},
\code{\link{s_NLA}()},
\code{\link{s_NLS}()},
\code{\link{s_NW}()},
\code{\link{s_PPR}()},
\code{\link{s_PolyMARS}()},
\code{\link{s_QDA}()},
\code{\link{s_QRNN}()},
\code{\link{s_RF}()},
\code{\link{s_RFSRC}()},
\code{\link{s_Ranger}()},
\code{\link{s_SDA}()},
\code{\link{s_SGD}()},
\code{\link{s_SPLS}()},
\code{\link{s_SVM}()},
\code{\link{s_TFN}()},
\code{\link{s_XRF}()}

Other Tree-based methods: 
\code{\link{s_AdaBoost}()},
\code{\link{s_AddTree}()},
\code{\link{s_BART}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTree}()},
\code{\link{s_EVTree}()},
\code{\link{s_GBM}()},
\code{\link{s_GLMTree}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_LMTree}()},
\code{\link{s_LightCART}()},
\code{\link{s_LightGBM}()},
\code{\link{s_MLRF}()},
\code{\link{s_RF}()},
\code{\link{s_RFSRC}()},
\code{\link{s_Ranger}()},
\code{\link{s_XRF}()}
}
\author{
E.D. Gennatas
}
\concept{Supervised Learning}
\concept{Tree-based methods}
