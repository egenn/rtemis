% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s.RANGER.R
\name{s.RANGER}
\alias{s.RANGER}
\title{Random Forest Classification and Regression [C, R]}
\usage{
s.RANGER(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  x.name = NULL,
  y.name = NULL,
  n.trees = 1000,
  weights = NULL,
  ipw = TRUE,
  ipw.type = 2,
  ipw.case.weights = TRUE,
  ipw.class.weights = FALSE,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  autotune = FALSE,
  classwt = NULL,
  n.trees.try = 500,
  stepFactor = 2,
  mtry = NULL,
  mtryStart = NULL,
  inbag.resample = NULL,
  stratify.on.y = FALSE,
  grid.resample.rtset = rtset.resample("kfold", 5),
  grid.search.type = c("exhaustive", "randomized"),
  grid.randomized.p = 0.1,
  metric = NULL,
  maximize = NULL,
  probability = FALSE,
  importance = "impurity",
  local.importance = FALSE,
  replace = TRUE,
  min.node.size = NULL,
  splitrule = NULL,
  strata = NULL,
  sampsize = if (replace) nrow(x) else ceiling(0.632 * nrow(x)),
  tune.do.trace = FALSE,
  imetrics = FALSE,
  n.cores = rtCores,
  print.tune.plot = FALSE,
  print.plot = TRUE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = getOption("rt.fit.theme", "lightgrid"),
  question = NULL,
  grid.verbose = TRUE,
  verbose = TRUE,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{n.trees}{Integer: Number of trees to grow. Default = 1000}

\item{weights}{Numeric vector: Weights for cases. For classification, \code{weights} takes precedence
over \code{ipw}, therefore set \code{weights = NULL} if using \code{ipw}.
Note: If \code{weight} are provided, \code{ipw} is not used. Leave NULL if setting \code{ipw = TRUE}. Default = NULL}

\item{ipw}{Logical: If TRUE, apply inverse probability weighting (for Classification only).
Note: If \code{weights} are provided, \code{ipw} is not used. Default = TRUE}

\item{ipw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by max(class.weights)
2: class.weights as in 0, divided by min(class.weights)
Default = 2}

\item{ipw.case.weights}{Logical: If TRUE, define ranger's \code{case.weights} using IPW. Default = TRUE
Note: Cannot use case.weights together with \code{stratify.on.y} or \code{inbag.resample}}

\item{ipw.class.weights}{Logical: If TRUE, define ranger's \code{class.weights} using IPW. Default = FALSE}

\item{upsample}{Logical: If TRUE, upsample training set cases not belonging in majority outcome
group}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{autotune}{Logical: If TRUE, use \code{randomForest::tuneRF} to determine \code{mtry}}

\item{classwt}{Vector, Float: Priors of the classes for \code{randomForest::tuneRF} if \code{autotune = TRUE}.
For classification only; need not add up to 1}

\item{n.trees.try}{Integer: Number of trees to train for tuning, if \code{autotune = TRUE}}

\item{stepFactor}{Float: If \code{autotune = TRUE}, at each tuning iteration, \code{mtry} is multiplied or
divided by this value. Default = 1.5}

\item{mtry}{[gS] Integer: Number of features sampled randomly at each split. Defaults to square root of n of
features for classification, and a third of n of features for regression.}

\item{mtryStart}{Integer: If \code{autotune = TRUE}, start at this value for \code{mtry}}

\item{inbag.resample}{List, length \code{n.tree}: Output of \link{rtset.resample} to define resamples used for each
tree. Default = NULL}

\item{stratify.on.y}{Logical: If TRUE, overrides \code{inbag.resample} to use stratified bootstraps for each tree.
This can help improve test set performance in imbalanced datasets. Default = FALSE. Note: Cannot be used with
\code{ipw.case.weights}}

\item{grid.resample.rtset}{List: Output of \link{rtset.resample} defining \link{gridSearchLearn} parameters.
Default = \code{rtset.resample("kfold", 5)}}

\item{grid.search.type}{Character: Type of grid search to perform: "exhaustive" or "randomized". Default = "exhaustive"}

\item{grid.randomized.p}{Float (0, 1): If \code{grid.search.type = "randomized"}, randomly run this proportion of
combinations. Default = .1}

\item{metric}{Character: Metric to minimize, or maximize if \code{maximize = TRUE} during grid search.
Default = NULL, which results in "Balanced Accuracy" for Classification,
"MSE" for Regression, and "Coherence" for Survival Analysis.}

\item{maximize}{Logical: If TRUE, \code{metric} will be maximized if grid search is run. Default = FALSE}

\item{probability}{Logical: If TRUE, grow a probability forest. See \code{ranger::ranger}. Default = FALSE}

\item{importance}{Character: "none", "impurity", "impurity_corrected", or "permutation"
Default = "impurity"}

\item{local.importance}{Logical: If TRUE, return local importance values. Only applicable if
\code{importance} is set to "permutation".}

\item{replace}{Logical: If TRUE, sample cases with replacement during training. Default = TRUE}

\item{min.node.size}{[gS] Integer: Minimum node size}

\item{splitrule}{Character: For classification: "gini" (Default) or "extratrees";
For regression: "variance" (Default), "extratrees" or "maxstat".
For survival "logrank" (Default), "extratrees", "C" or "maxstat".}

\item{strata}{Vector, Factor: Will be used for stratified sampling}

\item{sampsize}{Integer: Size of sample to draw. In Classification, if \code{strata} is defined, this
can be a vector of the same length, in which case, corresponding values determine how many cases are drawn from
the strata.}

\item{tune.do.trace}{Same as \code{do.trace} but for tuning, if \code{autotune = TRUE}}

\item{imetrics}{Logical: If TRUE, calculate interpretability metrics (N of trees and N of nodes) and save under
the 'extra' field of \link{rtMod}}

\item{n.cores}{Integer: Number of cores to use. Defaults to available cores reported by
\code{future::availableCores()}, unless option \code{rt.cores} is set at the time the library is loaded}

\item{print.tune.plot}{Logical: passed to \code{randomForest::tuneRF}. Default = FALSE}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}. Default = TRUE}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{grid.verbose}{Logical: Passed to \link{gridSearchLearn}}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{outdir}{String, Optional: Path to directory to save output}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional arguments to be passed to \code{ranger::ranger}}
}
\value{
\link{rtMod} object
}
\description{
Train a Random Forest for regression or classification using \code{ranger}
}
\details{
You should cconsider, or try, setting mtry to NCOL(x), especially for small number of features.
By default mtry is set to NCOL(x) for NCOL(x) <= 20.
For imbalanced datasets, setting stratify.on.y = TRUE should improve performance.
If \code{autotune = TRUE}, \code{randomForest::tuneRF} will be run to determine best \code{mtry}
  value.
[gS]: indicated parameter will be tuned by grid search if more than one value is passed

See \href{https://statistics.berkeley.edu/sites/default/files/tech-reports/666.pdf}{Tech Report} comparing
balanced (ipw.case.weights = TRUE) and weighted (ipw.class.weights = TRUE) Random Forests.
}
\seealso{
\link{elevate} for external cross-validation

Other Supervised Learning: 
\code{\link{s.ADABOOST}()},
\code{\link{s.ADDTREE}()},
\code{\link{s.BART}()},
\code{\link{s.BAYESGLM}()},
\code{\link{s.BRUTO}()},
\code{\link{s.C50}()},
\code{\link{s.CART}()},
\code{\link{s.CTREE}()},
\code{\link{s.DA}()},
\code{\link{s.ET}()},
\code{\link{s.EVTREE}()},
\code{\link{s.GAM.default}()},
\code{\link{s.GAM.formula}()},
\code{\link{s.GAMSELX2}()},
\code{\link{s.GAMSELX}()},
\code{\link{s.GAMSEL}()},
\code{\link{s.GAM}()},
\code{\link{s.GBM3}()},
\code{\link{s.GBM}()},
\code{\link{s.GLMNET}()},
\code{\link{s.GLM}()},
\code{\link{s.GLS}()},
\code{\link{s.H2ODL}()},
\code{\link{s.H2OGBM}()},
\code{\link{s.H2ORF}()},
\code{\link{s.IRF}()},
\code{\link{s.KNN}()},
\code{\link{s.LDA}()},
\code{\link{s.LM}()},
\code{\link{s.MARS}()},
\code{\link{s.MLRF}()},
\code{\link{s.NBAYES}()},
\code{\link{s.NLA}()},
\code{\link{s.NLS}()},
\code{\link{s.NW}()},
\code{\link{s.POLYMARS}()},
\code{\link{s.PPR}()},
\code{\link{s.PPTREE}()},
\code{\link{s.QDA}()},
\code{\link{s.QRNN}()},
\code{\link{s.RFSRC}()},
\code{\link{s.RF}()},
\code{\link{s.SGD}()},
\code{\link{s.SPLS}()},
\code{\link{s.SVM}()},
\code{\link{s.TFN}()},
\code{\link{s.XGBLIN}()},
\code{\link{s.XGB}()}

Other Tree-based methods: 
\code{\link{s.ADABOOST}()},
\code{\link{s.ADDTREE}()},
\code{\link{s.BART}()},
\code{\link{s.C50}()},
\code{\link{s.CART}()},
\code{\link{s.CTREE}()},
\code{\link{s.ET}()},
\code{\link{s.EVTREE}()},
\code{\link{s.GBM3}()},
\code{\link{s.GBM}()},
\code{\link{s.H2OGBM}()},
\code{\link{s.H2ORF}()},
\code{\link{s.IRF}()},
\code{\link{s.MLRF}()},
\code{\link{s.PPTREE}()},
\code{\link{s.RFSRC}()},
\code{\link{s.RF}()},
\code{\link{s.XGB}()}

Other Ensembles: 
\code{\link{s.ADABOOST}()},
\code{\link{s.GBM3}()},
\code{\link{s.GBM}()},
\code{\link{s.RF}()}
}
\author{
E.D. Gennatas
}
\concept{Ensembles}
\concept{Supervised Learning}
\concept{Tree-based methods}
