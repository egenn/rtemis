% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_SVM.R
\name{s_SVM}
\alias{s_SVM}
\title{Support Vector Machines (C, R)}
\usage{
s_SVM(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  x.name = NULL,
  y.name = NULL,
  grid.resample.params = setup.resample("kfold", 5),
  gridsearch.type = c("exhaustive", "randomized"),
  gridsearch.randomized.p = 0.1,
  class.weights = NULL,
  ifw = TRUE,
  ifw.type = 2,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  kernel = "radial",
  degree = 3,
  gamma = NULL,
  coef0 = 0,
  cost = 1,
  probability = TRUE,
  metric = NULL,
  maximize = NULL,
  plot.fitted = NULL,
  plot.predicted = NULL,
  print.plot = FALSE,
  plot.theme = rtTheme,
  n.cores = rtCores,
  question = NULL,
  verbose = TRUE,
  grid.verbose = verbose,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{grid.resample.params}{List: Output of \link{setup.resample} defining
grid search parameters.}

\item{gridsearch.type}{Character: Type of grid search to perform:
"exhaustive" or "randomized".}

\item{gridsearch.randomized.p}{Float (0, 1): If
\code{gridsearch.type = "randomized"}, randomly test this proportion of
combinations.}

\item{class.weights}{Float, length = n levels of outcome: Weights for each
outcome class.For classification, \code{class.weights} takes precedence over
\code{ifw}, therefore set \code{class.weights = NULL} if using \code{ifw}.}

\item{ifw}{Logical: If TRUE, apply inverse frequency weighting
(for Classification only).
Note: If \code{weights} are provided, \code{ifw} is not used.}

\item{ifw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by min(class.weights)
2: class.weights as in 0, divided by max(class.weights)}

\item{upsample}{Logical: If TRUE, upsample cases to balance outcome classes (for Classification only)
Note: upsample will randomly sample with replacement if the length of the majority class is more than double
the length of the class you are upsampling, thereby introducing randomness}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{kernel}{Character: "linear", "polynomial", "radial", "sigmoid"}

\item{degree}{[gS] Integer: Degree for \code{kernel = "polynomial"}.}

\item{gamma}{[gS] Float: Parameter used in all kernels except \code{linear}}

\item{coef0}{[gS] Float: Parameter used by kernels \code{polynomial} and
\code{sigmoid}}

\item{cost}{[gS] Float: Cost of constraints violation; the C constant of the
regularization term in the Lagrange
formulation.}

\item{probability}{Logical: If TRUE, model allows probability estimates}

\item{metric}{Character: Metric to minimize, or maximize if
\code{maximize = TRUE} during grid search. Default = NULL, which results in
"Balanced Accuracy" for Classification,
"MSE" for Regression, and "Coherence" for Survival Analysis.}

\item{maximize}{Logical: If TRUE, \code{metric} will be maximized if grid
search is run.}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}.}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{n.cores}{Integer: Number of cores to use.}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{grid.verbose}{Logical: Passed to \code{gridSearchLearn}}

\item{outdir}{Path to output directory.
If defined, will save Predicted vs. True plot, if available,
as well as full model output, if \code{save.mod} is TRUE}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional arguments to be passed to \code{e1071::svm}}
}
\description{
Train an SVM learner using \code{e1071::svm}
}
\details{
[gS] denotes parameters that will be tuned by cross-validation if more than one value is passed.
Regarding SVM tuning, the following guide from the LIBSVM authors can be useful:
http://www.csie.ntu.edu.tw/~cjlin/papers/guide/guide.pdf
They suggest searching for cost = 2 ^ seq(-5, 15, 2) and
gamma = 2 ^ seq(-15, 3, 2)
}
\seealso{
\link{train_cv} for external cross-validation

Other Supervised Learning: 
\code{\link{s_AdaBoost}()},
\code{\link{s_AddTree}()},
\code{\link{s_BART}()},
\code{\link{s_BRUTO}()},
\code{\link{s_BayesGLM}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTree}()},
\code{\link{s_EVTree}()},
\code{\link{s_GAM}()},
\code{\link{s_GBM}()},
\code{\link{s_GLM}()},
\code{\link{s_GLMNET}()},
\code{\link{s_GLMTree}()},
\code{\link{s_GLS}()},
\code{\link{s_H2ODL}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_HAL}()},
\code{\link{s_Isotonic}()},
\code{\link{s_KNN}()},
\code{\link{s_LDA}()},
\code{\link{s_LM}()},
\code{\link{s_LMTree}()},
\code{\link{s_LightCART}()},
\code{\link{s_LightGBM}()},
\code{\link{s_MARS}()},
\code{\link{s_MLRF}()},
\code{\link{s_NBayes}()},
\code{\link{s_NLA}()},
\code{\link{s_NLS}()},
\code{\link{s_NW}()},
\code{\link{s_PPR}()},
\code{\link{s_PolyMARS}()},
\code{\link{s_QDA}()},
\code{\link{s_QRNN}()},
\code{\link{s_RF}()},
\code{\link{s_RFSRC}()},
\code{\link{s_Ranger}()},
\code{\link{s_SDA}()},
\code{\link{s_SGD}()},
\code{\link{s_SPLS}()},
\code{\link{s_TFN}()},
\code{\link{s_XGBoost}()},
\code{\link{s_XRF}()}
}
\author{
E.D. Gennatas
}
\concept{Supervised Learning}
