% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preprocess_.R
\name{preprocess_}
\alias{preprocess_}
\title{Data preprocessing (in-place)}
\usage{
preprocess_(
  x,
  removeFeatures.thres = NULL,
  missingness = FALSE,
  integer2factor = FALSE,
  integer2numeric = FALSE,
  logical2factor = FALSE,
  logical2numeric = FALSE,
  numeric2factor = FALSE,
  numeric2factor.levels = NULL,
  len2factor = 0,
  character2factor = FALSE,
  factorNA2missing = FALSE,
  factorNA2missing.level = "missing",
  scale = FALSE,
  center = scale,
  removeConstants = FALSE,
  oneHot = FALSE,
  exclude = NULL,
  verbose = TRUE
)
}
\arguments{
\item{x}{data.frame or data.table to be preprocessed. If data.frame, will
be converted to data.table in-place
of missing features.}

\item{removeFeatures.thres}{Float (0, 1): Remove features with missing
values in >= to this fraction of cases.}

\item{missingness}{Logical: If TRUE, generate new boolean columns for each
feature with missing values, indicating which cases were missing data.}

\item{integer2factor}{Logical: If TRUE, convert all integers to factors}

\item{integer2numeric}{Logical: If TRUE, convert all integers to numeric
(will only work if \code{integer2factor = FALSE})}

\item{logical2factor}{Logical: If TRUE, convert all logical variables to
factors}

\item{logical2numeric}{Logical: If TRUE, convert all logical variables to
numeric}

\item{numeric2factor}{Logical: If TRUE, convert all numeric variables to
factors}

\item{numeric2factor.levels}{Character vector: Optional - If \code{numeric2factor = TRUE},
use these levels for all numeric variables.}

\item{len2factor}{Integer (>=2): Convert all numeric variables with less
than or equal to this number of unique values to factors.
For example, if binary variables are encoded with 1, 2, you could use
\code{len2factor = 2} to convert them to factors. If race is encoded with 6
integers, you can use 6.}

\item{character2factor}{Logical: If TRUE, convert all character variables
to factors}

\item{factorNA2missing}{Logical: If TRUE, make NA values in factors be of
level \code{factorNA2missing.level}. In many cases this is the preferred way
to handle missing data in categorical variables. Note that since this step
is performed before imputation, you can use this option to handle missing
data in categorical variables and impute numeric variables in the same
\code{preprocess} call.}

\item{factorNA2missing.level}{Character: Name of level if
\code{factorNA2missing = TRUE}.}

\item{scale}{Logical: If TRUE, scale columns of \code{x}}

\item{center}{Logical: If TRUE, center columns of \code{x}}

\item{removeConstants}{Logical: If TRUE, remove constant columns.}

\item{oneHot}{Logical: If TRUE, convert all factors using one-hot encoding}

\item{exclude}{Integer, vector: Exclude these columns from preprocessing.}

\item{verbose}{Logical: If TRUE, write messages to console.}
}
\description{
Prepare data for analysis and visualization
}
\details{
This function (ending in "_") performs operations \strong{in-place} and returns the
preprocessed data.table silently (e.g. for piping).
Note that imputation is not currently supported - use \link{preprocess}
for imputation.

Order of operations is the same as the order of arguments in usage:
\itemize{
\item keep complete cases only
\item remove duplicates
\item remove cases by missingness threshold
\item remove features by missingness threshold
\item integer to factor
\item integer to numeric
\item logical to factor
\item logical to numeric
\item numeric to factor
\item numeric with less than N unique values to factor
\item character to factor
\item factor NA to named level
\item add missingness column
\item scale and/or center
\item remove constants
\item one-hot encoding
}
}
\examples{
\dontrun{
x <- data.table(a = sample(c(1:3), 30, T),
b = rnorm(30, 12),
c = rnorm(30, 200),
d = sample(c(21:22), 30, T),
e = rnorm(30, -100),
f = rnorm(30, 950),
g = rnorm(30),
h = rnorm(30))
## add duplicates
x <- rbind(x, x[c(1, 3), ])
## add constant
x[, z := 99]
preprocess_(x)
}
}
\author{
E.D. Gennatas
}
