% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_LM.R
\name{s_LM}
\alias{s_LM}
\title{Linear model}
\usage{
s_LM(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  x.name = NULL,
  y.name = NULL,
  weights = NULL,
  ifw = TRUE,
  ifw.type = 2,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  intercept = TRUE,
  robust = FALSE,
  gls = FALSE,
  polynomial = FALSE,
  poly.d = 3,
  poly.raw = FALSE,
  print.plot = FALSE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = rtTheme,
  na.action = na.exclude,
  question = NULL,
  verbose = TRUE,
  trace = 0,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{weights}{Numeric vector: Weights for cases. For classification, \code{weights} takes precedence
over \code{ifw}, therefore set \code{weights = NULL} if using \code{ifw}.
Note: If \code{weight} are provided, \code{ifw} is not used. Leave NULL if setting \code{ifw = TRUE}.}

\item{ifw}{Logical: If TRUE, apply inverse frequency weighting
(for Classification only).
Note: If \code{weights} are provided, \code{ifw} is not used.}

\item{ifw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by min(class.weights)
2: class.weights as in 0, divided by max(class.weights)}

\item{upsample}{Logical: If TRUE, upsample cases to balance outcome classes (for Classification only)
Note: upsample will randomly sample with replacement if the length of the majority class is more than double
the length of the class you are upsampling, thereby introducing randomness}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{intercept}{Logical: If TRUE, fit an intercept term.}

\item{robust}{Logical: if TRUE, use \code{MASS::rlm()} instead of base \code{lm()}}

\item{gls}{Logical: if TRUE, use \code{nlme::gls}}

\item{polynomial}{Logical: if TRUE, run lm on \code{poly(x, poly.d)} (creates orthogonal polynomials)}

\item{poly.d}{Integer: degree of polynomial}

\item{poly.raw}{Logical: if TRUE, use raw polynomials.
Default, which should not really be changed is FALSE}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}.}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{na.action}{How to handle missing values. See \code{?na.fail}}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{trace}{Integer: If higher than 0, will print more information to the console.}

\item{outdir}{Path to output directory.
If defined, will save Predicted vs. True plot, if available,
as well as full model output, if \code{save.mod} is TRUE}

\item{save.mod}{Logical. If TRUE, save all output as RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional arguments to be passed to \code{MASS::rlm} if \code{robust = TRUE}
or \code{MASS::lm.gls} if \code{gls = TRUE}}
}
\value{
\code{rtMod}
}
\description{
Fit a linear model and validate it. Options include base \code{lm()}, robust linear model using
\code{MASS:rlm()}, generalized least squares using \code{nlme::gls}, or polynomial regression
using \code{stats::poly} to transform features
}
\details{
GLS can be useful in place of a standard linear model, when there is correlation among
the residuals and/or they have unequal variances.
Warning: \code{nlme}'s implementation is buggy, and \code{predict} will not work
because of environment problems, which means it fails to get predicted values if
\code{x.test} is provided.
\code{robut = TRUE} trains a robust linear model using \code{MASS::rlm}.
\code{gls = TRUE} trains a generalized least squares model using \code{nlme::gls}.
}
\examples{
x <- rnorm(100)
y <- .6 * x + 12 + rnorm(100) / 2
mod <- s_LM(x, y)
}
\seealso{
\link{train_cv} for external cross-validation

Other Supervised Learning: 
\code{\link{s_AdaBoost}()},
\code{\link{s_AddTree}()},
\code{\link{s_BART}()},
\code{\link{s_BRUTO}()},
\code{\link{s_BayesGLM}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTree}()},
\code{\link{s_EVTree}()},
\code{\link{s_GAM}()},
\code{\link{s_GBM}()},
\code{\link{s_GLM}()},
\code{\link{s_GLMNET}()},
\code{\link{s_GLMTree}()},
\code{\link{s_GLS}()},
\code{\link{s_H2ODL}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_HAL}()},
\code{\link{s_Isotonic}()},
\code{\link{s_KNN}()},
\code{\link{s_LDA}()},
\code{\link{s_LMTree}()},
\code{\link{s_LightCART}()},
\code{\link{s_LightGBM}()},
\code{\link{s_MARS}()},
\code{\link{s_MLRF}()},
\code{\link{s_NBayes}()},
\code{\link{s_NLA}()},
\code{\link{s_NLS}()},
\code{\link{s_NW}()},
\code{\link{s_PPR}()},
\code{\link{s_PolyMARS}()},
\code{\link{s_QDA}()},
\code{\link{s_QRNN}()},
\code{\link{s_RF}()},
\code{\link{s_RFSRC}()},
\code{\link{s_Ranger}()},
\code{\link{s_SDA}()},
\code{\link{s_SGD}()},
\code{\link{s_SPLS}()},
\code{\link{s_SVM}()},
\code{\link{s_TFN}()},
\code{\link{s_XGBoost}()},
\code{\link{s_XRF}()}
}
\author{
E.D. Gennatas
}
\concept{Supervised Learning}
