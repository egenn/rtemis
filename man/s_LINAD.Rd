% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_LINAD.R
\name{s_LINAD}
\alias{s_LINAD}
\title{Linear Additive Tree (C, R)}
\usage{
s_LINAD(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  weights = NULL,
  max.leaves = 20,
  lookback = TRUE,
  force.max.leaves = NULL,
  learning.rate = 0.5,
  ifw = TRUE,
  ifw.type = 1,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  leaf.model = c("line", "spline"),
  gamlearner = "gamsel",
  gam.params = list(),
  nvmax = 3,
  gamma = 0.5,
  gamma.on.lin = FALSE,
  lin.type = c("glmnet", "forwardStepwise", "cv.glmnet", "lm.ridge", "allSubsets",
    "backwardStepwise", "glm", "solve", "none"),
  first.lin.type = "cv.glmnet",
  first.lin.learning.rate = 1,
  first.lin.alpha = 1,
  first.lin.lambda = NULL,
  cv.glmnet.nfolds = 5,
  which.cv.glmnet.lambda = "lambda.min",
  alpha = 1,
  lambda = 0.05,
  lambda.seq = NULL,
  minobsinnode.lin = 10,
  part.minsplit = 2,
  part.xval = 0,
  part.max.depth = 1,
  part.cp = 0,
  part.minbucket = 1,
  .rho = TRUE,
  rho.max = 1000,
  init = NULL,
  metric = "auto",
  maximize = NULL,
  grid.resample.params = setup.resample("kfold", 5),
  gridsearch.type = "exhaustive",
  save.gridrun = FALSE,
  select.leaves.smooth = FALSE,
  cluster = FALSE,
  keep.x = FALSE,
  simplify = TRUE,
  cxrcoef = FALSE,
  n.cores = rtCores,
  .preprocess = NULL,
  verbose = TRUE,
  grid.verbose = FALSE,
  plot.tuning = FALSE,
  verbose.predict = FALSE,
  trace = 1,
  x.name = NULL,
  y.name = NULL,
  question = NULL,
  outdir = NULL,
  print.plot = FALSE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = rtTheme,
  save.mod = FALSE,
  .gs = FALSE
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{weights}{Numeric vector: Weights for cases. For classification, \code{weights} takes precedence
over \code{ifw}, therefore set \code{weights = NULL} if using \code{ifw}.
Note: If \code{weight} are provided, \code{ifw} is not used. Leave NULL if setting \code{ifw = TRUE}.}

\item{max.leaves}{Integer: Maximum number of terminal nodes to grow. Setting
this to a value > 1, triggers cross-validation to find best number of leaves.
To force a given number of leaves and not cross-validate, set
\code{force.max.leaves} to any (integer) value.}

\item{lookback}{Logical: If TRUE, use validation error to decide best
number of leaves to use.}

\item{force.max.leaves}{Integer: If set, \code{max.leaves} is ignored and
the tree will attempt to reach this number of leaves, without performing
tuning number of leaves.}

\item{learning.rate}{[gS] Numeric: learning rate for steps after initial
linear model}

\item{ifw}{Logical: If TRUE, apply inverse frequency weighting
(for Classification only).
Note: If \code{weights} are provided, \code{ifw} is not used.}

\item{ifw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by min(class.weights)
2: class.weights as in 0, divided by max(class.weights)}

\item{upsample}{Logical: If TRUE, upsample cases to balance outcome classes (for Classification only)
Note: upsample will randomly sample with replacement if the length of the majority class is more than double
the length of the class you are upsampling, thereby introducing randomness}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{nvmax}{[gS] Integer: Number of max features to use for lin.type
"allSubsets", "forwardStepwise", or "backwardStepwise". If values greater
than n of features in \code{x} are provided, they will be excluded}

\item{gamma}{[gS] Numeric: Soft weighting parameter. Weights of cases that
do not belong to node get multiplied by this amount}

\item{lin.type}{Character: One of "glmnet", "forwardStepwise", "cv.glmnet",
"lm.ridge", "allSubsets", "backwardStepwise", "glm", "solve", or "none"
to not fit linear models
See \link{lincoef} for more}

\item{first.lin.type}{Character: same options as \code{lin.type}, the first
linear model to fit on the root node.}

\item{first.lin.alpha}{Numeric: alpha for the first linear model, if
\code{first.lin.type} is "glmnet" or "cv.glmnet"}

\item{lambda}{[gS] Numeric: lambda value for lin.type \code{glmnet},
\code{cv.glmnet}, \code{lm.ridge}}

\item{minobsinnode.lin}{[gS] Integer: Minimum number of observation needed
to fit linear model}

\item{part.minsplit}{[gS] Integer: Minimum number of observations in node to
consider splitting}

\item{part.max.depth}{Integer: Max depth for each tree model within the
additive tree}

\item{part.cp}{[gS] Numeric: Split must decrease complexity but at least
this much to be considered}

\item{part.minbucket}{[gS] Integer: Minimum number of observations allowed in
child node to allow splitting}

\item{init}{Initial value. Default = \code{mean(y)}}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{plot.tuning}{Logical: If TRUE, plot validation error during gridsearch}

\item{trace}{Integer: If higher than 0, will print more information to the console.}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{outdir}{Path to output directory.
If defined, will save Predicted vs. True plot, if available,
as well as full model output, if \code{save.mod} is TRUE}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}.}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{.gs}{internal use only}
}
\description{
Train a Linear Additive Tree for Regression or Binary Classification
}
\details{
The Linear Additive Tree trains a tree using a sequence of regularized
linear models and splits. We specify an upper threshold of leaves using
\code{max.leaves} instead of directly defining a number, because depending
on the other parameters and the datasets, splitting may stop early.

[gS] indicates tunable hyperparameters that can accept a vector of possible
values
}
\author{
E.D. Gennatas
}
