% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_IRF.R
\name{s_IRF}
\alias{s_IRF}
\title{Iterative Random Forest (C, R)}
\usage{
s_IRF(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  x.name = NULL,
  y.name = NULL,
  n.trees = 1000,
  n.iter = 5,
  n.bootstrap = 30,
  interactions.return = NULL,
  classwt = NULL,
  ifw = TRUE,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  autotune = FALSE,
  n.trees.try = 500,
  stepFactor = 2,
  mtry = NULL,
  mtryStart = NULL,
  mtry.select.prob = NULL,
  proximity = FALSE,
  importance = TRUE,
  replace = TRUE,
  min.node.size = 1,
  strata = NULL,
  sampsize = NULL,
  tune.do.trace = FALSE,
  print.tune.plot = FALSE,
  print.plot = FALSE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = rtTheme,
  n.cores = rtCores,
  question = NULL,
  verbose = TRUE,
  trace = 0,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{n.trees}{Integer: Number of trees to grow. Default = 1000}

\item{classwt}{Vector, Float: Priors of the classes for classification only. Need not add up to 1}

\item{ifw}{Logical: If TRUE, apply inverse frequency weighting
(for Classification only).
Note: If \code{weights} are provided, \code{ifw} is not used.}

\item{upsample}{Logical: If TRUE, upsample training set cases not belonging in majority outcome
group}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{autotune}{Logical: If TRUE, use \code{randomForest::tuneRF} to determine \code{mtry}}

\item{n.trees.try}{Integer: Number of trees to train for tuning, if \code{autotune = TRUE}}

\item{stepFactor}{Float: If \code{autotune = TRUE}, at each tuning iteration, \code{mtry} is multiplied or
divided by this value. Default = 1.5}

\item{mtry}{\link{gS} Integer: Number of features sampled randomly at each split}

\item{mtryStart}{Integer: If \code{autotune = TRUE}, start at this value for \code{mtry}}

\item{proximity}{Logical: If TRUE, calculate proximity measure among cases.}

\item{importance}{Logical: If TRUE, estimate variable relative importance.}

\item{replace}{Logical: If TRUE, sample cases with replacement during training.}

\item{strata}{Vector, Factor: Will be used for stratified sampling}

\item{sampsize}{Integer: Size of sample to draw. In Classification, if \code{strata} is defined, this
can be a vector of the same length, in which case, corresponding values determine how many cases are drawn from
the strata.}

\item{tune.do.trace}{Same as \code{do.trace} but for tuning,
when \code{autotune = TRUE}}

\item{print.tune.plot}{Logical: passed to \code{randomForest::tuneRF}.}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}.}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{n.cores}{Integer: Number of cores to use.}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{outdir}{String, Optional: Path to directory to save output}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional arguments to be passed to \code{iRF::iRF}}
}
\value{
\link{rtMod} object
}
\description{
Train iterative Random Forests for regression or classification using \code{iRF}
}
\details{
If \code{autotue = TRUE}, \code{iRF::tuneRF} will be run to determine best \code{mtry}
value.
}
\seealso{
\link{elevate} for external cross-validation

Other Supervised Learning: 
\code{\link{s_ADABOOST}()},
\code{\link{s_ADDTREE}()},
\code{\link{s_BART}()},
\code{\link{s_BRUTO}()},
\code{\link{s_BayesGLM}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTREE}()},
\code{\link{s_ET}()},
\code{\link{s_EVTREE}()},
\code{\link{s_GAM.default}()},
\code{\link{s_GAM.formula}()},
\code{\link{s_GAM}()},
\code{\link{s_GBM3}()},
\code{\link{s_GBM}()},
\code{\link{s_GLMNET}()},
\code{\link{s_GLMTree}()},
\code{\link{s_GLM}()},
\code{\link{s_GLS}()},
\code{\link{s_H2ODL}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_HAL}()},
\code{\link{s_KNN}()},
\code{\link{s_LDA}()},
\code{\link{s_LMTree}()},
\code{\link{s_LM}()},
\code{\link{s_LightGBM}()},
\code{\link{s_MARS}()},
\code{\link{s_MLRF}()},
\code{\link{s_NBayes}()},
\code{\link{s_NLA}()},
\code{\link{s_NLS}()},
\code{\link{s_NW}()},
\code{\link{s_POLYMARS}()},
\code{\link{s_PPR}()},
\code{\link{s_PPTREE}()},
\code{\link{s_QDA}()},
\code{\link{s_QRNN}()},
\code{\link{s_RANGER}()},
\code{\link{s_RFSRC}()},
\code{\link{s_RF}()},
\code{\link{s_SDA}()},
\code{\link{s_SGD}()},
\code{\link{s_SPLS}()},
\code{\link{s_SVM}()},
\code{\link{s_TFN}()},
\code{\link{s_XGBoost}()},
\code{\link{s_XRF}()}

Other Tree-based methods: 
\code{\link{s_ADABOOST}()},
\code{\link{s_ADDTREE}()},
\code{\link{s_BART}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTREE}()},
\code{\link{s_ET}()},
\code{\link{s_EVTREE}()},
\code{\link{s_GBM3}()},
\code{\link{s_GBM}()},
\code{\link{s_GLMTree}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_LMTree}()},
\code{\link{s_LightGBM}()},
\code{\link{s_MLRF}()},
\code{\link{s_PPTREE}()},
\code{\link{s_RANGER}()},
\code{\link{s_RFSRC}()},
\code{\link{s_RF}()},
\code{\link{s_XGBoost}()},
\code{\link{s_XRF}()}
}
\author{
E.D. Gennatas
}
\concept{Supervised Learning}
\concept{Tree-based methods}
