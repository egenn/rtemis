% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_RF.R
\name{s_RF}
\alias{s_RF}
\title{Random Forest Classification and Regression [C, R]}
\usage{
s_RF(
  x,
  y = NULL,
  x.test = NULL,
  y.test = NULL,
  x.name = NULL,
  y.name = NULL,
  n.trees = 1000,
  autotune = FALSE,
  n.trees.try = 1000,
  stepFactor = 1.5,
  mtry = NULL,
  nodesize = NULL,
  maxnodes = NULL,
  mtryStart = mtry,
  grid.resample.rtset = rtset.resample("kfold", 5),
  metric = NULL,
  maximize = NULL,
  classwt = NULL,
  ipw = TRUE,
  ipw.type = 2,
  upsample = FALSE,
  downsample = FALSE,
  resample.seed = NULL,
  importance = TRUE,
  proximity = FALSE,
  replace = TRUE,
  strata = NULL,
  sampsize = if (replace) nrow(x) else ceiling(0.632 * nrow(x)),
  sampsize.ratio = NULL,
  do.trace = NULL,
  tune.do.trace = FALSE,
  imetrics = FALSE,
  n.cores = rtCores,
  print.tune.plot = FALSE,
  print.plot = TRUE,
  plot.fitted = NULL,
  plot.predicted = NULL,
  plot.theme = rtTheme,
  proximity.tsne = FALSE,
  discard.forest = FALSE,
  tsne.perplexity = 5,
  plot.tsne.train = FALSE,
  plot.tsne.test = FALSE,
  question = NULL,
  rtclass = NULL,
  verbose = TRUE,
  grid.verbose = verbose,
  outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE),
  ...
)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{n.trees}{Integer: Number of trees to grow. Default = 1000}

\item{autotune}{Logical: If TRUE, use \code{randomForest::tuneRF} to determine \code{mtry}}

\item{n.trees.try}{Integer: Number of trees to train for tuning, if \code{autotune = TRUE}}

\item{stepFactor}{Float: If \code{autotune = TRUE}, at each tuning iteration, \code{mtry} is multiplied or
divided by this value. Default = 1.5}

\item{mtry}{[gS] Integer: Number of features sampled randomly at each split}

\item{nodesize}{[gS]: Integer: Minimum size of terminal nodes. Default = 5 (Regression);
1 (Classification)}

\item{maxnodes}{[gS]: Integer: Maximum number of terminal nodes in a tree. Default = NULL; trees
grown to maximum possible}

\item{mtryStart}{Integer: If \code{autotune = TRUE}, start at this value for \code{mtry}}

\item{grid.resample.rtset}{List: Output of \link{rtset.resample} defining 
\link{gridSearchLearn} parameters.}

\item{metric}{Character: Metric to minimize, or maximize if 
\code{maximize = TRUE} during grid search. Default = NULL, which results in 
"Balanced Accuracy" for Classification,
"MSE" for Regression, and "Coherence" for Survival Analysis.}

\item{maximize}{Logical: If TRUE, \code{metric} will be maximized if grid 
search is run.}

\item{classwt}{Vector, Float: Priors of the classes for classification only. Need not add up to 1}

\item{ipw}{Logical: If TRUE, apply inverse probability weighting (for Classification only).
Note: If \code{weights} are provided, \code{ipw} is not used. Default = TRUE}

\item{ipw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by max(class.weights)
2: class.weights as in 0, divided by min(class.weights)
Default = 2}

\item{upsample}{Logical: If TRUE, upsample training set cases not belonging in majority outcome
group}

\item{downsample}{Logical: If TRUE, downsample majority class to match size of minority class}

\item{resample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{importance}{Logical: If TRUE, estimate variable relative importance.}

\item{proximity}{Logical: If TRUE, calculate proximity measure among cases.}

\item{replace}{Logical: If TRUE, sample cases with replacement during training.}

\item{strata}{Vector, Factor: Will be used for stratified sampling}

\item{sampsize}{Integer: Size of sample to draw. In Classification, if \code{strata} is defined, this
can be a vector of the same length, in which case, corresponding values determine how many cases are drawn from
the strata.}

\item{sampsize.ratio}{Float (0, 1): Heuristic of sorts to increase sensitivity in unbalanced
cases. Sample with replacement from minority case to create bootstraps of length N cases.
Select \code{(sampsize.ratio * N minority cases)} cases from majority class.}

\item{do.trace}{Logical or integer: If TRUE, \code{randomForest} will outpout information while it is running.
If an integer, \code{randomForest} will report progress every this many trees. Default = \code{n.trees/10} if
\code{verbose = TRUE}}

\item{tune.do.trace}{Same as \code{do.trace} but for tuning, 
when \code{autotune = TRUE}}

\item{imetrics}{Logical: If TRUE, calculate interpretability metrics 
(N of trees and N of nodes) and save under the \code{extra} field of \link{rtMod}}

\item{n.cores}{Integer: Number of cores to use.}

\item{print.tune.plot}{Logical: passed to \code{randomForest::tuneRF}.}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}. Default = TRUE}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{Character: "zero", "dark", "box", "darkbox"}

\item{proximity.tsne}{Logical: If TRUE, perform t-SNE on proximity matrix. Will be saved under 'extra' field of
\link{rtMod}. Default = FALSE}

\item{discard.forest}{Logical: If TRUE, remove forest from \link{rtMod} object to save space.
Default = FALSE}

\item{tsne.perplexity}{Numeric: Perplexity parameter for \code{Rtsne::Rtsne}}

\item{plot.tsne.train}{Logical: If TRUE, plot training set tSNE projections}

\item{plot.tsne.test}{Logical: If TRUE, plot testing set tSNE projections}

\item{question}{Character: the question you are attempting to answer with this model, in plain language.}

\item{rtclass}{Character: Class type to use. "S3", "S4", "RC", "R6"}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{grid.verbose}{Logical: Passed to \link{gridSearchLearn}}

\item{outdir}{String, Optional: Path to directory to save output}

\item{save.mod}{Logical: If TRUE, save all output to an RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional arguments to be passed to \code{randomForest::randomForest}}
}
\value{
\link{rtMod} object
}
\description{
Train a Random Forest for regression or classification using \code{randomForest}
}
\details{
If \code{autotue = TRUE}, \code{randomForest::tuneRF} will be run to determine best \code{mtry}
  value.
}
\seealso{
\link{elevate} for external cross-validation

Other Supervised Learning: 
\code{\link{s_ADABOOST}()},
\code{\link{s_ADDTREE}()},
\code{\link{s_BART}()},
\code{\link{s_BAYESGLM}()},
\code{\link{s_BRUTO}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTREE}()},
\code{\link{s_ET}()},
\code{\link{s_EVTREE}()},
\code{\link{s_GAM.default}()},
\code{\link{s_GAM.formula}()},
\code{\link{s_GAMSELX2}()},
\code{\link{s_GAMSELX}()},
\code{\link{s_GAMSEL}()},
\code{\link{s_GAM}()},
\code{\link{s_GBM3.R}()},
\code{\link{s_GBM}()},
\code{\link{s_GLMNET}()},
\code{\link{s_GLMTREE}()},
\code{\link{s_GLM}()},
\code{\link{s_GLS}()},
\code{\link{s_H2ODL}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_IRF}()},
\code{\link{s_KNN}()},
\code{\link{s_LDA}()},
\code{\link{s_LMTREE}()},
\code{\link{s_LM}()},
\code{\link{s_MARS}()},
\code{\link{s_MLRF}()},
\code{\link{s_NBAYES}()},
\code{\link{s_NLA}()},
\code{\link{s_NLS}()},
\code{\link{s_NW}()},
\code{\link{s_POLYMARS}()},
\code{\link{s_PPR}()},
\code{\link{s_PPTREE}()},
\code{\link{s_QDA}()},
\code{\link{s_QRNN}()},
\code{\link{s_RANGER}()},
\code{\link{s_RFSRC}()},
\code{\link{s_SDA}()},
\code{\link{s_SGD}()},
\code{\link{s_SPLS}()},
\code{\link{s_SVM}()},
\code{\link{s_TFN}()},
\code{\link{s_XGBOOST}()}

Other Tree-based methods: 
\code{\link{s_ADABOOST}()},
\code{\link{s_ADDTREE}()},
\code{\link{s_BART}()},
\code{\link{s_C50}()},
\code{\link{s_CART}()},
\code{\link{s_CTREE}()},
\code{\link{s_ET}()},
\code{\link{s_EVTREE}()},
\code{\link{s_GBM3.R}()},
\code{\link{s_GBM}()},
\code{\link{s_GLMTREE}()},
\code{\link{s_H2OGBM}()},
\code{\link{s_H2ORF}()},
\code{\link{s_IRF}()},
\code{\link{s_LMTREE}()},
\code{\link{s_MLRF}()},
\code{\link{s_PPTREE}()},
\code{\link{s_RANGER}()},
\code{\link{s_RFSRC}()},
\code{\link{s_XGBOOST}()}

Other Ensembles: 
\code{\link{s_ADABOOST}()},
\code{\link{s_GBM3.R}()},
\code{\link{s_GBM}()},
\code{\link{s_RANGER}()}
}
\author{
E.D. Gennatas
}
\concept{Ensembles}
\concept{Supervised Learning}
\concept{Tree-based methods}
